package wc;
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;

import org.apache.hadoop.fs.Path;

import org.apache.hadoop.io.IntWritable;

import org.apache.hadoop.io.Text;

import org.apache.hadoop.mapreduce.Job;

import org.apache.hadoop.mapreduce.Mapper;

import org.apache.hadoop.mapreduce.Reducer;

import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;

import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import org.apache.hadoop.util.GenericOptionsParser;

public class Dedup {


    public static class Map extends Mapper<Object,Text,Text,Text>{

        private static Text line=new Text();

        public void map(Object key,Text value,Context context)

                throws IOException,InterruptedException{

            line=value;

            context.write(line, new Text(""));
        }
    }


    public static class Reduce extends Reducer<Text,Text,Text,Text>{


        public void reduce(Text key,Iterable<Text> values,Context context)

                throws IOException,InterruptedException{

            context.write(key, new Text(""));

        }

       

    }


    public static void main(String[] args) throws Exception{

        Configuration conf = new Configuration();

 
        String[] ioArgs=new String[]{"dedup_in","dedup_out"};

     String[] otherArgs = new GenericOptionsParser(conf, ioArgs).getRemainingArgs();

     if (otherArgs.length != 2) {

     System.err.println("Usage: Data Deduplication <in> <out>");

     System.exit(2);

     }

     Job job = new Job(conf, "Data Deduplication");

     job.setJarByClass(Dedup.class);

     job.setMapperClass(Map.class);

     job.setCombinerClass(Reduce.class);

     job.setReducerClass(Reduce.class);


     job.setOutputKeyClass(Text.class);

     job.setOutputValueClass(Text.class);


     FileInputFormat.addInputPath(job, new Path(otherArgs[0]));

     FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));

     System.exit(job.waitForCompletion(true) ? 0 : 1);

     }

}
map输出数据的key为数据，而在这个实例中每个数据代表输入文件中的一行内容，所

以map阶段要完成的任务就是在采用Hadoop默认的作业输入方式之后，将value设置为

key，并直接输出（输出中的value任意）。map中的结果经过shuffle过程之后交给

reduce。reduce阶段不会管每个key有多少个value，它直接将输入的key复制为输出的

key，并输出就可以了（输出中的value被设置成空了）。

